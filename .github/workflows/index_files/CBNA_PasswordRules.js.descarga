/*******************************************************************************
 * Entrust TruePass 7.0
 */

function passwordCheckLength(newPassword, minLength)
{
	// Password length check
	if (newPassword.length < minLength)
	{
		return false;
	}
	else
	{
		return true;
	}


}

function passwordCheckUpperCase(newPassword)
{
	// Uppercase check
	if (newPassword == newPassword.toLowerCase())
	{
		return false;
	}
	else
	{
		return true;
	}

}

function passwordCheckLowerCase(newPassword)
{
	// Lowercase check
	if (newPassword == newPassword.toUpperCase())
	{
		return false;
	}
	else
	{
		return true;
	}

}

function passwordCheckNumericChar(newPassword)
{
	// Numeric check
	if (newPassword.match(/[0-9]+/g) == null)
	{
		return false;
	}
	else
	{
		return true;
	}

}

function passwordCheckNonAlphaNumericChar(newPassword)
{
	// Numeric check
	if (newPassword.match(/[^A-Za-z0-9]+/g) == null)
	{
		return false;
	}
	else
	{
		return true;
	}

}

function passwordChecknAlphaChar(newPassword)
{
	if (newPassword.match(/[A-Za-z]+/g) == null)
	{
		return false;
	}
	else
	{
		return true;
	}
}

function passwordCheckSpecialChar(newPassword)
{
	// Special check ‘ ' “ ´ < > ` ^ & \
	if (newPassword.match(/[~!@#\$%*\(\)_\-\+=\{\}\[\]\|:;,\.\?/]+/g) == null)    
	{
		return false;
	}
	else
	{
		return true;
	}
}


function PasswordCheckSpecialCharNoPermitido(newPassword)
{
	// Special check
	if (newPassword.match(/[^A-Za-z0-9~!@#\$%*\(\)_\-\+=\{\}\[\]\|:;,\.\?/]+/g) == null)    
	{
		return false;
	}
	else
	{
		return true;
	}
}




function passwordCheckProfileUse(newPassword, currentUserName)
{
	// Cannot contain a portion of profile name longer than half its length
	rule6Broken = (newPassword.length == 0);
	lengthLimit = Math.round(newPassword.length/2);
	for (index = 0; index <= (newPassword.length - lengthLimit); index++)
	{
		// take a portion of the password
		portion = newPassword.substring(index, index + lengthLimit);
			// ------------------------------------------------------------------
		// Check if the portion can be found in the user name.
		if (currentUserName.indexOf(portion) != -1)
		{
			rule6Broken = true;
			break;
		}
	}
	if (rule6Broken)
	{
		return false;
	}
	else
	{
		return true;
	}

}
	
function passwordCheckRepeatChar(newPassword)
{
	// Cannot repeat a character more than half the length of the password
	rule7Broken = (newPassword.length == 0);
        lengthLimit = 8;
	repeatLimit = lengthLimit;
	repeatCount = 1;            
	for (index = 0; index <= (newPassword.length - 1); index++)
	{
		// ------------------------------------------------------------------
		// compare the two neighbour characters
		if (newPassword.charAt(index) == newPassword.charAt(index + 1))
		{
			repeatCount++;
			if (repeatCount > repeatLimit)
			{
				rule7Broken = true;
				break;
			}
		}
		else
		{
			repeatCount = 1;
		}            
	}        
	if (rule7Broken)
	{
		return false;	
	}
	else
	{
		return true;
	}
}

function passwordCheckPasswordMatch(newPassword, confirmPassword)
{
	// Password match check
	if (newPassword.length == 0 || newPassword != confirmPassword)
	{
		return false;
	}
	else
	{
		return true;
	}

}


